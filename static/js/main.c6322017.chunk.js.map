{"version":3,"sources":["Box.js","helpers.js","BoxesContainer.js","App.js","reportWebVitals.js","index.js"],"names":["Box","props","msg","changed","className","style","backgroundColor","color","choice","arr","Math","floor","random","length","BoxesContainer","useState","Array","from","numBoxes","allColors","boxes","setBoxes","changedBox","setChangedBox","boxComponents","map","i","console","log","onClick","evt","idx","boxCopy","defaultProps","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yRAqBeA,MAjBf,SAAaC,GAEX,IAAIC,EAAM,KAKV,MAJsB,aAAlBD,EAAME,UACRD,EAAM,YAIN,qBACEE,UAAU,MACVC,MAAO,CAAEC,gBAAiBL,EAAMM,OAFlC,SAIGL,K,MCdP,SAASM,EAAOC,GAEd,OAAOA,EADWC,KAAKC,MAAMD,KAAKE,SAAWH,EAAII,SCGnD,SAASC,EAAeb,GAAQ,IAAD,EACHc,mBACxBC,MAAMC,KAAK,CAAEJ,OAAQZ,EAAMiB,WAAY,kBAAMV,EAAOP,EAAMkB,eAF/B,mBACtBC,EADsB,KACfC,EADe,OAION,qBAJP,mBAItBO,EAJsB,KAIVC,EAJU,KAuBvBC,EAAgBJ,EAAMK,KAAI,SAAClB,EAAOmB,GAAR,OAAc,cAAC,EAAD,CAAanB,MAAOA,EAAOJ,QAASuB,IAAMJ,EAAa,WAAa,MAA1DI,MAGxD,OAFAC,QAAQC,IAAIJ,GAGV,gCACE,6CACA,yBAASpB,UAAU,iBAAnB,SAAqCoB,IACrC,wBAAQK,QAtBQ,SAAAC,GAClB,IAAIC,EAAMrB,KAAKC,MAAMD,KAAKE,SAAWX,EAAMiB,UAE3CG,GAAS,SAAAD,GACP,IAAIY,EAAO,YAAOZ,GAElB,OADAY,EAAQD,GAAOvB,EAAOP,EAAMkB,WACrBa,KAGTT,EAAcQ,IAaZ,6BAKNjB,EAAemB,aAAe,CAC5Bf,SAAU,GACVC,UAAW,CACT,OACA,QACA,iBACA,OACA,YACA,aACA,WACA,YACA,OACA,OACA,cACA,YACA,MACA,OACA,UACA,SACA,YACA,SACA,SACA,gBAIWL,QCvDAoB,MARf,WACE,OACE,qBAAK9B,UAAU,MAAf,SACE,cAAC,EAAD,OCKS+B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c6322017.chunk.js","sourcesContent":["import React from \"react\"\nimport \"./Box.css\";\n\n/** Individual colored box. */\nfunction Box(props) {\n\n  let msg = null\n  if (props.changed === \"changed!\") {\n    msg = \"changed!\"\n  }\n\n  return (\n    <div\n      className=\"Box\"\n      style={{ backgroundColor: props.color }}\n    >\n      {msg}\n    </div>\n  );\n}\n\nexport default Box;\n","/** Return a random item from a list. */\n\nfunction choice(arr) {\n  let randomIndex = Math.floor(Math.random() * arr.length);\n  return arr[randomIndex];\n}\n\nexport {choice};","import React, { useState } from \"react\";\nimport Box from \"./Box\";\nimport \"./BoxesContainer.css\";\nimport { choice } from \"./helpers\";\n\n\nfunction BoxesContainer(props) {\n  const [boxes, setBoxes] = useState(\n    Array.from({ length: props.numBoxes }, () => choice(props.allColors))\n  );\n  const [changedBox, setChangedBox] = useState()\n\n\n  /** On button click: pick random box, change to random color. */\n  const handleClick = evt => {\n    let idx = Math.floor(Math.random() * props.numBoxes);\n\n    setBoxes(boxes => {\n      let boxCopy = [...boxes];\n      boxCopy[idx] = choice(props.allColors);\n      return boxCopy;\n    });\n\n    setChangedBox(idx)\n\n  };\n\n\n\n  const boxComponents = boxes.map((color, i) => <Box key={i} color={color} changed={i === changedBox ? \"changed!\" : null} />);\n  console.log(boxComponents)\n\n  return (\n    <div>\n      <h1>Color Boxes</h1>\n      <section className=\"BoxesContainer\">{boxComponents}</section>\n      <button onClick={handleClick}>Change a Box</button>\n    </div>\n  );\n}\n\nBoxesContainer.defaultProps = {\n  numBoxes: 16,\n  allColors: [\n    \"Aqua\",\n    \"Black\",\n    \"BlanchedAlmond\",\n    \"Blue\",\n    \"Chocolate\",\n    \"DodgerBlue\",\n    \"Lavender\",\n    \"LawnGreen\",\n    \"Peru\",\n    \"Plum\",\n    \"SpringGreen\",\n    \"SteelBlue\",\n    \"Tan\",\n    \"Teal\",\n    \"Thistle\",\n    \"Tomato\",\n    \"Turquoise\",\n    \"Violet\",\n    \"Yellow\",\n    \"YellowGreen\"\n  ]\n};\n\nexport default BoxesContainer;\n","import React from \"react\";\nimport \"./App.css\";\nimport BoxesContainer from \"./BoxesContainer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BoxesContainer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}